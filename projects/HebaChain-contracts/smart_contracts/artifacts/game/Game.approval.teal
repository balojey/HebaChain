#pragma version 10

smart_contracts.game.contract.Game.approval_program:
    callsub __puya_arc4_router__
    return


// smart_contracts.game.contract.Game.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@8
    method "register(string)(uint64,string,uint64)"
    method "fund_account(pay)uint64"
    method "buy_asset(byte[],uint64)void"
    method "admin_upsert_asset((string,string,uint64))void"
    txna ApplicationArgs 0
    match __puya_arc4_router___register_route@2 __puya_arc4_router___fund_account_route@3 __puya_arc4_router___buy_asset_route@4 __puya_arc4_router___admin_upsert_asset_route@5
    int 0
    retsub

__puya_arc4_router___register_route@2:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    callsub register
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___fund_account_route@3:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txn GroupIndex
    int 1
    -
    dup
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    callsub fund_account
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___buy_asset_route@4:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    callsub buy_asset
    int 1
    retsub

__puya_arc4_router___admin_upsert_asset_route@5:
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    txna ApplicationArgs 1
    callsub admin_upsert_asset
    int 1
    retsub

__puya_arc4_router___bare_routing@8:
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@12
    txn ApplicationID
    !
    assert // is creating
    int 1
    retsub

__puya_arc4_router___after_if_else@12:
    int 0
    retsub


// smart_contracts.game.contract.Game.register(name: bytes) -> bytes:
register:
    proto 1 1
    byte "user"
    txn Sender
    concat
    box_len
    bury 1
    bnz register_after_if_else@2
    global LatestTimestamp
    itob
    byte 0x0012
    concat
    byte 0x0000000000000000
    concat
    frame_dig -1
    concat
    byte "user"
    txn Sender
    concat
    dup
    box_del
    pop
    swap
    box_put

register_after_if_else@2:
    byte "user"
    txn Sender
    concat
    box_get
    assert // check self.user entry exists
    retsub


// smart_contracts.game.contract.Game.fund_account(payment: uint64) -> bytes:
fund_account:
    proto 1 1
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // Payment receiver must be the application address
    frame_dig -1
    gtxns Sender
    byte "user"
    swap
    concat
    dup
    box_len
    bury 1
    assert // User must be registered
    dup
    box_get
    assert // check self.user entry exists
    extract 10 8 // on error: Index access is out of bounds
    btoi
    frame_dig -1
    gtxns Amount
    +
    itob
    dig 1
    box_get
    assert // check self.user entry exists
    swap
    replace2 10
    dig 1
    box_del
    pop
    dig 1
    swap
    box_put
    box_get
    assert // check self.user entry exists
    extract 10 8 // on error: Index access is out of bounds
    retsub


// smart_contracts.game.contract.Game.buy_asset(asset_id: bytes, quantity: uint64) -> void:
buy_asset:
    proto 2 0
    byte "user"
    txn Sender
    concat
    box_len
    bury 1
    assert // User must be registered
    byte "asset"
    frame_dig -2
    concat
    dup
    box_len
    bury 1
    assert // Invalid asset ID
    byte "user"
    txn Sender
    concat
    box_get
    assert // check self.user entry exists
    extract 10 8 // on error: Index access is out of bounds
    btoi
    swap
    box_get
    assert // check self.asset entry exists
    extract 4 8 // on error: Index access is out of bounds
    btoi
    frame_dig -1
    *
    dup2
    >=
    assert // Insufficient funds
    -
    itob
    byte "user"
    txn Sender
    concat
    box_get
    assert // check self.user entry exists
    swap
    replace2 10
    byte "user"
    txn Sender
    concat
    dup
    box_del
    pop
    swap
    box_put
    txn Sender
    frame_dig -2
    concat
    sha256
    byte "user_asset"
    swap
    concat
    dup
    box_len
    bury 1
    bz buy_asset_else_body@2
    dup
    box_get
    swap
    btoi
    swap
    assert // check self.user_asset entry exists
    frame_dig -1
    +
    itob
    box_put
    b buy_asset_after_if_else@3

buy_asset_else_body@2:
    frame_dig -1
    itob
    box_put

buy_asset_after_if_else@3:
    retsub


// smart_contracts.game.contract.Game.admin_upsert_asset(asset: bytes) -> void:
admin_upsert_asset:
    proto 1 0
    txn Sender
    global CreatorAddress
    ==
    assert // Only the creator can call this method
    frame_dig -1
    int 0
    extract_uint16
    frame_dig -1
    int 2
    extract_uint16
    frame_dig -1
    cover 2
    substring3
    sha256
    byte "asset"
    swap
    concat
    dup
    box_del
    pop
    frame_dig -1
    box_put
    retsub
