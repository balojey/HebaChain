/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "add_product(string,string,string,address,address,string,string,string)(string,string,string,address,address,address,string,string,string,uint64)": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "Product",
          "elements": [
            [
              "id",
              "string"
            ],
            [
              "name",
              "string"
            ],
            [
              "state",
              "string"
            ],
            [
              "distributor",
              "address"
            ],
            [
              "intermediary",
              "address"
            ],
            [
              "customer",
              "address"
            ],
            [
              "condition",
              "string"
            ],
            [
              "current_location",
              "string"
            ],
            [
              "delivery_location",
              "string"
            ],
            [
              "delivery_date",
              "uint64"
            ]
          ]
        }
      }
    },
    "ship_product(string,string,string,string,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "alter_product(string,string,string,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deliver_product(string,string,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuaGViYV9jaGFpbi5jb250cmFjdC5IZWJhQ2hhaW4uY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIGludCAxCiAgICByZXR1cm4K"
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {},
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "HebaChain",
    "methods": [
      {
        "name": "add_product",
        "args": [
          {
            "type": "string",
            "name": "product_id"
          },
          {
            "type": "string",
            "name": "history_id"
          },
          {
            "type": "string",
            "name": "name",
            "desc": "The product's name."
          },
          {
            "type": "address",
            "name": "customer"
          },
          {
            "type": "address",
            "name": "intermediary"
          },
          {
            "type": "string",
            "name": "condition"
          },
          {
            "type": "string",
            "name": "current_location"
          },
          {
            "type": "string",
            "name": "delivery_location"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(string,string,string,address,address,address,string,string,string,uint64)",
          "desc": "The user's profile information."
        },
        "desc": "Add a product."
      },
      {
        "name": "ship_product",
        "args": [
          {
            "type": "string",
            "name": "product_id"
          },
          {
            "type": "string",
            "name": "history_id"
          },
          {
            "type": "string",
            "name": "condition"
          },
          {
            "type": "string",
            "name": "location"
          },
          {
            "type": "uint64",
            "name": "delivery_date"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "alter_product",
        "args": [
          {
            "type": "string",
            "name": "product_id"
          },
          {
            "type": "string",
            "name": "history_id"
          },
          {
            "type": "string",
            "name": "condition"
          },
          {
            "type": "string",
            "name": "location"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deliver_product",
        "args": [
          {
            "type": "string",
            "name": "product_id"
          },
          {
            "type": "string",
            "name": "history_id"
          },
          {
            "type": "string",
            "name": "condition"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the HebaChain smart contract.
 */
export type HebaChain = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'add_product(string,string,string,address,address,string,string,string)(string,string,string,address,address,address,string,string,string,uint64)' | 'add_product', {
      argsObj: {
        productId: string
        historyId: string
        /**
         * The product's name.
         */
        name: string
        customer: string
        intermediary: string
        condition: string
        currentLocation: string
        deliveryLocation: string
      }
      argsTuple: [productId: string, historyId: string, name: string, customer: string, intermediary: string, condition: string, currentLocation: string, deliveryLocation: string]
      /**
       * The user's profile information.
       */
      returns: Product
    }>
    & Record<'ship_product(string,string,string,string,uint64)void' | 'ship_product', {
      argsObj: {
        productId: string
        historyId: string
        condition: string
        location: string
        deliveryDate: bigint | number
      }
      argsTuple: [productId: string, historyId: string, condition: string, location: string, deliveryDate: bigint | number]
      returns: void
    }>
    & Record<'alter_product(string,string,string,string)void' | 'alter_product', {
      argsObj: {
        productId: string
        historyId: string
        condition: string
        location: string
      }
      argsTuple: [productId: string, historyId: string, condition: string, location: string]
      returns: void
    }>
    & Record<'deliver_product(string,string,string)void' | 'deliver_product', {
      argsObj: {
        productId: string
        historyId: string
        condition: string
      }
      argsTuple: [productId: string, historyId: string, condition: string]
      returns: void
    }>
}
/**
 * Defines the possible abi call signatures
 */
export type HebaChainSig = keyof HebaChain['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends HebaChainSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a Product result as a struct
 */
export type Product = {
  id: string
  name: string
  state: string
  distributor: string
  intermediary: string
  customer: string
  condition: string
  currentLocation: string
  deliveryLocation: string
  deliveryDate: bigint
}
/**
 * Converts the tuple representation of a Product to the struct representation
 */
export function Product([id, name, state, distributor, intermediary, customer, condition, currentLocation, deliveryLocation, deliveryDate]: [string, string, string, string, string, string, string, string, string, bigint] ) {
  return {
    id,
    name,
    state,
    distributor,
    intermediary,
    customer,
    condition,
    currentLocation,
    deliveryLocation,
    deliveryDate,
  }
}
/**
 * Maps a method signature from the HebaChain smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends HebaChainSig> = HebaChain['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the HebaChain smart contract to the method's return type
 */
export type MethodReturn<TSignature extends HebaChainSig> = HebaChain['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type HebaChainCreateCalls = (typeof HebaChainCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type HebaChainCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type HebaChainDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: HebaChainCreateCalls) => HebaChainCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class HebaChainCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the HebaChain smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the add_product(string,string,string,address,address,string,string,string)(string,string,string,address,address,address,string,string,string,uint64) ABI method
   *
   * Add a product.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addProduct(args: MethodArgs<'add_product(string,string,string,address,address,string,string,string)(string,string,string,address,address,address,string,string,string,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'add_product(string,string,string,address,address,string,string,string)(string,string,string,address,address,address,string,string,string,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.productId, args.historyId, args.name, args.customer, args.intermediary, args.condition, args.currentLocation, args.deliveryLocation],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the ship_product(string,string,string,string,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static shipProduct(args: MethodArgs<'ship_product(string,string,string,string,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'ship_product(string,string,string,string,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.productId, args.historyId, args.condition, args.location, args.deliveryDate],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the alter_product(string,string,string,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static alterProduct(args: MethodArgs<'alter_product(string,string,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'alter_product(string,string,string,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.productId, args.historyId, args.condition, args.location],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deliver_product(string,string,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deliverProduct(args: MethodArgs<'deliver_product(string,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deliver_product(string,string,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.productId, args.historyId, args.condition],
      ...params,
    }
  }
}

/**
 * A client to make calls to the HebaChain smart contract
 */
export class HebaChainClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `HebaChainClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof HebaChain['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the HebaChain smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: HebaChainDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(HebaChainCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the HebaChain smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the HebaChain smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the add_product(string,string,string,address,address,string,string,string)(string,string,string,address,address,address,string,string,string,uint64) ABI method.
   *
   * Add a product.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The user's profile information.
   */
  public addProduct(args: MethodArgs<'add_product(string,string,string,address,address,string,string,string)(string,string,string,address,address,address,string,string,string,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(HebaChainCallFactory.addProduct(args, params), Product)
  }

  /**
   * Calls the ship_product(string,string,string,string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public shipProduct(args: MethodArgs<'ship_product(string,string,string,string,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(HebaChainCallFactory.shipProduct(args, params))
  }

  /**
   * Calls the alter_product(string,string,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public alterProduct(args: MethodArgs<'alter_product(string,string,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(HebaChainCallFactory.alterProduct(args, params))
  }

  /**
   * Calls the deliver_product(string,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deliverProduct(args: MethodArgs<'deliver_product(string,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(HebaChainCallFactory.deliverProduct(args, params))
  }

  public compose(): HebaChainComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      addProduct(args: MethodArgs<'add_product(string,string,string,address,address,string,string,string)(string,string,string,address,address,address,string,string,string,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addProduct(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Product)
        return this
      },
      shipProduct(args: MethodArgs<'ship_product(string,string,string,string,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.shipProduct(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      alterProduct(args: MethodArgs<'alter_product(string,string,string,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.alterProduct(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deliverProduct(args: MethodArgs<'deliver_product(string,string,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deliverProduct(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as HebaChainComposer
  }
}
export type HebaChainComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the add_product(string,string,string,address,address,string,string,string)(string,string,string,address,address,address,string,string,string,uint64) ABI method.
   *
   * Add a product.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addProduct(args: MethodArgs<'add_product(string,string,string,address,address,string,string,string)(string,string,string,address,address,address,string,string,string,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): HebaChainComposer<[...TReturns, MethodReturn<'add_product(string,string,string,address,address,string,string,string)(string,string,string,address,address,address,string,string,string,uint64)'>]>

  /**
   * Calls the ship_product(string,string,string,string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  shipProduct(args: MethodArgs<'ship_product(string,string,string,string,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): HebaChainComposer<[...TReturns, MethodReturn<'ship_product(string,string,string,string,uint64)void'>]>

  /**
   * Calls the alter_product(string,string,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  alterProduct(args: MethodArgs<'alter_product(string,string,string,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): HebaChainComposer<[...TReturns, MethodReturn<'alter_product(string,string,string,string)void'>]>

  /**
   * Calls the deliver_product(string,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deliverProduct(args: MethodArgs<'deliver_product(string,string,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): HebaChainComposer<[...TReturns, MethodReturn<'deliver_product(string,string,string)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the HebaChain smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): HebaChainComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): HebaChainComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<HebaChainComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<HebaChainComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type HebaChainComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type HebaChainComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
